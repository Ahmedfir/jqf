/*
 The MIT License

 Copyright (c) 2017 University of California, Berkeley

 Permission is hereby granted, free of charge, to any person obtaining
 a copy of this software and associated documentation files (the
 "Software"), to deal in the Software without restriction, including
 without limitation the rights to use, copy, modify, merge, publish,
 distribute, sublicense, and/or sell copies of the Software, and to
 permit persons to whom the Software is furnished to do so, subject to
 the following conditions:

 The above copyright notice and this permission notice shall be
 included in all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
package edu.berkeley.cs.jqf.fuzz.guidance;

import java.io.File;
import java.util.function.Consumer;

import edu.berkeley.cs.jqf.instrument.tracing.events.TraceEvent;

/**
 * A front-end for guided fuzzing.
 *
 * Before each fuzzing trial, the front-end is
 * queried for input to be used as a source
 * of random numbers by junit-quickcheck's generators.
 *
 * During a fuzzing trial, trace events are generated, and the
 * front-end provides callbacks to handle these trace events
 * (e.g. to collect branch coverage).
 *
 * At the end of a fuzzing trial, the front-end is notified of
 * the result of the trial.
 *
 * The standard sequence of method invocations on a Guidance
 * instance is as follows:
 * <code>
 *     while (guidance.hasInput()) {
 *         input = read_from(guidance.getInputFile())
 *         try {
 *             run_trial(input) // generates many trace events
 *             guidance.handleResult(SUCCESS, null);
 *         } catch (AssumptionViolatedException e) {
 *             guidance.handleResult(INVALID, e);
 *         } catch (Throwable t) {
 *             guidance.handleResult(FAILURE, e);
 *         }
 *     }
 * </code>
 */
public interface Guidance {

    /**
     * Returns a reference to a file containing values to
     * return from the pseudo-random number generator.
     *
     * @return  a file handle
     */
    File getInputFile();

    /**
     * Returns whether a new trial should be executed.
     *
     * @return whether a new trial should be executed
     */
    boolean hasInput();

    /**
     * Handles the end of a fuzzing trial.
     *
     * If <tt>result</tt> is <tt>SUCCESS</tt>, then
     * <tt>error</tt> MUST be <tt>null</tt>.
     *
     * If <tt>result</tt> is <tt>INVALID</tt>,
     * then <tt>error</tt> is an
     * <tt>AssumptionViolatedException</tt>.
     *
     * If <tt>result</tt> is <tt>FAILURE</tt>, then
     * <tt>error</tt> is some other throwable. Assertion
     * failures are treated just as any other uncaught
     * exception.
     *
     * @param result   the result of the fuzzing trial
     * @param error    the error thrown during the trial, or <tt>null</tt>
     */
    void handleResult(Result result, Throwable error);

    /**
     * Returns a callback generator for a thread's event trace.
     *
     * The application under test is instrumented such that each
     * thread generates a trace of events that may be handled by a
     * separate callback.
     *
     * This method is a supplier of event consumers. It is invoked
     * once per new application thread spawned during fuzzing.
     *
     * @param threadName  the name of the thread whose events to handle
     * @return            a callback that handles trace events generated by
     *                    that thread
     * @see {@link TraceEvent}
     */
    Consumer<TraceEvent> generateCallBack(String threadName);



}
